@using System.Globalization
@model Compilify.Web.Models.PageContent

@{ ViewBag.Title = "Home"; }

<div id="define">
    <div class="page-header">
        <h1>code <small><a class="js-save" href="#">save</a></small></h1>
    </div>
    <textarea class="js-editor">@Model.Code</textarea>
</div>
<div id="errors">
    <div class="page-header">
        <h1>errors</h1>
    </div>
    <ul>
        @if (Model.Errors == null || !Model.Errors.Any())
        {
            <li>No errors!</li>
        }
        else
        {
            foreach (var error in Model.Errors.OrderBy(x => x.Location.GetLineSpan(false).StartLinePosition))
            {
                <li>@error.Info.GetMessage(CultureInfo.InvariantCulture)</li>
            }
        }
        
    </ul>
</div>


@section PageScripts {
    <script>
        "use strict";
        
        (function(Compilify) {
            var root = this,
                $ = root.jQuery,
                _ = root._,
                CodeMirror = root.CodeMirror;
            
            var validate = _.debounce(function(sender, key) {
                var currentSlug = window.location.

                $.ajax('/home/validate', {
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                         code: sender.getValue()
                    }),
                    success: function (msg) {
                        var $list = $('#errors ul').detach().empty();

                        if (msg.data.length === 0) {
                            $list.append('<li>Build completed successfully.</li>');
                        }
                        else {
                            for (var i in msg.data) {
                                var error = msg.data[i];
                                
                                $list.append('<li>' + error.Message + '</li>');
                            }
                        }
                            
                        $('#errors').append($list);
                    }
                });
            }, 500);

            $(function() {
                var editor = $('#define .js-editor')[0];

                // Set up editor
                Compilify.Editor = CodeMirror.fromTextArea(editor, {
                    indentUnit: 4,
                    lineNumbers: true,
                    theme: 'neat',
                    mode: 'text/x-csharp',
                    onKeyEvent: validate
                });

                var saveAddress = window.location.pathname;

                $('#define .js-save').on('click', function() {
                    $.ajax(saveAddress, {
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ content: { Code: Compilify.Editor.getValue() } }),
                        success: function(msg) {
                            window.history.replaceState({ }, '', msg.data.url);
                            saveAddress = '/' + msg.data.slug;
                        }
                    });
                });
            });
        }).call(window, window.Compilify || {});
    </script>
}
